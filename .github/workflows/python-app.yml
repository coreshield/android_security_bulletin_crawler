# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: get android security bulltin

on:
  push
  # schedule:
  #   - cron: "0 23/7 * * *" # 7:00 & 15:00 in UTC+8

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run python scripts
        run: |
          output=$(python crawler.py)
          echo "::set-output name=digest::$output"
        id: crawler
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: result.json
      - name: Get current date
        id: current_date
        run: |
          echo "curDate=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.crawler.outputs.digest }}
          tag_name: ${{ env.curDate }}
          release_name: ${{ env.curDate }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./result.json
          asset_name: result.json
          asset_content_type: application/json
